stem(cdc$weight)
library(ggplot2)
qplot(cdc$weight, binwidth=2)
head(mtcars)
head(cdc)
cov(cdc[c("height", "weight"),])
cdc[c("height", "weight"),]
cdc[,c("height", "weight")]
cov(cdc[,c("height", "weight")])
head(cdc)
cov(cdc[,c("age","height", "weight")])
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(mtcars[1:3])), fill=value, geom="tile")
head(cdc)
boxplot(mtcars$mpg, mtcars$mpg[mtcars$am==0], ylab = "mpg", names=c("overall","automobile"))
abline(h=mean(mtcars$mpg),lwd=2, col="red")
abline(h=mean(mtcars$mpg[mtcars$am==0]),lwd=2, col="blue")
boxplot(mtcars$mpg~mtcars$am,ylab='mpg',names=c('automatic','manual'))
abline(h=mean(mtcars$mpg[mtcars$am==0]),lwd=2, col="blue")
abline(h=mean(mtcars$mpg[mtcars$am==1]),lwd=2, col="red")
load("mlb11.Rdata")
head (mlb11)
correlation = cor(mlb11$runs, mlb11$at_bats)
correlation
plot(mlb11$runs, mlb11$at_bats)
plot(mlb11$at_bats, mlb11$runs)
m1 = lm(runs ~ at_bats, data = mlb11)
m1
plot(mlb11$runs ~ mlb11$at_bats)
m1 = lm(runs ~ at_bats, data = mlb11)
abline(m1)
ftable = table(mtcars$am, mtcars$gear)
mosaicplot(ftable, main="Number of Forward Gears Within Automatic and Manual Cars", color = TRUE)
boxplot(mtcars$mpg~factor(mtcars$gear),xlab='gear',ylab='mpg')
par(mfrow=c(1,2))
boxplot(mtcars$mpg~mtcars$gear,subset=(mtcars$am==0),xlab='gear', ylab = "mpg",main='automatic')
boxplot(mtcars$mpg~mtcars$gear,subset=(mtcars$am==1),xlab='gear', ylab = "mpg", main='manual')
boxplot(mtcars$mpg~factor(mtcars$gear)* factor(mtcars$am),xlab='gear * transmission', ylab = "mpg",main='Boxplot of mpg by gear * transmission')
boxplot(mtcars$mpg~factor(mtcars$gear)* factor(mtcars$am),xlab='gear * transmission', ylab = "mpg",main='Boxplot of mpg by gear * transmission')
library(rJava)
library(rJava)
library(rJava)
install.packaes("XML")
install.packages("XML")
library(XML)
library(XML)
fileurl = "http://data.ntpc.gov.tw/NTPC/od/data/api/IMC14?$format=xml&$top=3"
doc = xmlTreeParse(fileurl)
doc
install.packages("jsonlite")
library(jsonlite)
install.packages('httr')
jsondata = fromJSON("https://api.github.com/users/ywchiu/repos")
jsondata
names(jsondata)
install.packages("httr")
con = url("http://travel.rakuten.com/hotel/Japan-Hokkaido-Noboribetsu-Noboribetsu_Onsen_Noboribetsu_Grand_Hotel/39175/")
htmlcode = readLines(con)
close(con)
htmlcode
library(RJDBC)
install.packages("RJDBC")
```
```
df1 = data.frame(id = 1:3, x= rep(1,3))
df2 = data.frame(id = 1:3, y= rnorm(3))
arrange(join(df1,df2), id)
library(plyr)
df1 = data.frame(id = 1:3, x= rep(1,3))
df2 = data.frame(id = 1:3, y= rnorm(3))
arrange(join(df1,df2), id)
library(rJava)
load("cdc.Rdata")
setwd("~/")
load("cdc.Rdata")
names(cdc)
hist(cdc$weight)
hist(cdc$weight)
hist(cdc$weight, breaks=50)
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
summary(cdc$weight)
range(cdc$weight)
length(cdc$weight)
sd(cdc$weight)
sd(cdc$weight) ^ 2
IQR(cdc$weight)
quantile(cdc$weight,0.67)
max(cdc$weight)
min(cdc$weight)
cummax(cdc$weight)
cummin(cdc$weight)
sample(1:10)
sample(1:10, size = 5)
sample(c(0,1), 10, replace = TRUE)
sample.int(20, 12)
load(kobe.RData)
load("kobe.RData")
get_streak = function(x){
y = rep(0,length(x))
y[x == "H"] = 1
y = c(0, y, 0)
wz = which(y == 0)
streak = diff(wz) - 1
return(streak)
}
kobe_streak = get_streak(kobe$basket)
barplot(table(kobe_streak))
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfair_coin)
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfair_coin)
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
outcomes = c("heads", "tails")
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfair_coin)
outcomes = c("H", "M")
sim_basket = sample(outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
table(sim_basket)
kobe_streak = get_streak(kobe$basket)
sim_streak = get_streak(sim_basket)
summary(kobe_streak)
summary(sim_streak)
kobe_table = table(kobe_streak)
sim_table = table(sim_streak)
barplot(kobe_table)
barplot(sim_table)
load("ames.Rdata")
area = ames$Gr.Liv.Area
hist(area)
sample_means10 = rep(NA, 5000)
sample_means50 = rep(NA, 5000)
sample_means100 = rep(NA, 5000)
for (i in 1:5000) {
samp = sample(area, 10)
sample_means10[i] = mean(samp)
samp = sample(area, 50)
sample_means50[i] = mean(samp)
samp = sample(area, 100)
sample_means100[i] = mean(samp)
}
population = ames$Gr.Liv.Area
samp = sample(population, 50)
sample_mean = mean(samp)
hist(samp)
sde = sd(samp)/sqrt(50)
lower = sample_mean - 1.96 * sde
upper = sample_mean + 1.96 * sde
lower
upper
cov(mtcars[1:3])
cor(mtcars[1:3])
load(“mlb11.Rdata”)
load("mlb11.Rdata")
load("cdc.Rdata")
df1 = data.frame(id = 1:3, x= rep(1,3))
df1
df2 = data.frame(id = 1:3, y= rnorm(3))
df2
arrange(join(df1,df2), id)
library(plyr)
arrange(join(df1,df2), id)
a = list(df1,df2)
join_all(a)
a
join_all(a)
??arrange
sos(arrange)
install.packages("sos")
?sos
??sos
library(sos)
PL <- findFn('Petal.Length')
merge(df1,df2, by.x="id", by.y="id", all=TRUE)
RSiteSearch("arrange")
review = read.csv(file="reviews.csv", headers=TRUE)
review = read.csv(file="reviews.csv", header=TRUE)
review
setwd("~/rbasic/course2")
review = read.csv(file="reviews.csv", header=TRUE)
solution = read.csv(file="solutions.csv", header=TRUE)
head(review)
head(solution)
merge(review,solution, by.x="id", by.y="id", all=TRUE)
res = merge(review,solution, by.x="id", by.y="id", all=TRUE)
head(res)
head(reviews)
head(review)
head(solutions)
head(solution)
head(res)
tail(res)
arrange(join(review,solution), id)
arrange(join(review,solution), id)
arrange(join(review,solution), id)
head(arrange(join(review,solution), id))
?arrange
head(arrange(join(review,solution), id, FALSE))
head(arrange(join(review,solution,id)))
?join
head(arrange(join(review,solution, by= id)))
join(review,solution, by= id)
join(review,solution, by="id")
setwd("~/rbasic/course3")
load("cdc.Rdata")
View(cdc)
names(cdc)
str(cdc)
a = 3.5
class(a)
as.int(a)
int(a)
b = 0
class(b)
c = 3
class(c)
c = int(3)
c = as.integer(3)
class(c)
class(as.integer(3.5))
q = as.integer(3.5)
q
q = as.integer(0)
q
q = as.integer(4)
q
kobe
cdc
load(cdc)
load("cdc.Rdata")
q = 21.232323
class(q)
as.integer(12)
as.single(12)
as.double(12)
class(as.integer(12))
class(as.single(12))
class(as.double(12))
class(as.integer(12.123))
class(as.single(12.12))
class(as.double(12.33))
load("~/rbasic/course3/cdc.Rdata")
View(cdc)
head(cdc)
tail(cdc)
class(cdc)
str(cdc)
levels(cdc$genhlth)
3.5
class(3.5)
class(as.integer(3.5)
)
as.integer(3.5)
hist(cdc$weight)
hist(cdc$weight)
?hist
hist(cdc$weight, breaks=50)
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
summary(cdc$weight)
range(cdc$weight)
length(cdc$weight)
sd(cdc$weight)
sd(cdc$weight) ^ 2
IQR(cdc$weight)
quantile(cdc$weight,0.67)
max(cdc$weight)
min(cdc$weight)
cummax(cdc$weight)
cummin(cdc$weight)
mtcars
View(mtcars)
cummax(mtcars$mpg)
boxplot(cdc$weight)
stem(cdc$weight)
library(ggplot2)
qplot(cdc$weight, binwidth=2)
library(ggplot2)
qplot(cdc$weight, binwidth=2)
library(ggplot2)
qplot(cdc$weight, binwidth=20)
??mean
??ggplot
Rsitesearch("word tokenization")
rsitesearch("word tokenization")
sos("word tokenization")
sos(arrange)
library(sos)
sos("word tokenization")
?sos
??sos
sos(arrange)
findFn('word token')
a = findFn('word token')
a
?findFn
install.packages("sos")
install.packages("sos")
library(sos)
a = findFn('word token')
head(cdc$smoke1000
)
head(cdc$smoke100)
table(cdc$smoke100)
length(cdc$smoke100)
table(cdc$smoke100) / length(cdc$smoke100)
barplot(table(cdc$smoke100))
gender_smokers = table(cdc$gender, cdc$smoke100)
gender_smokers
mosaicplot(gender_smokers)
gender_smokers = table(cdc$gender, cdc$smoke100, cdc$hlthplan)
mosaicplot(gender_smokers)
gender_smokers
gender_smokers = table(cdc$gender, cdc$smoke100, cdc$hlthplan)
gender_smokers
mosaicplot(gender_smokers)
table(cdc$gender) / length(cdc$gender)
names(cdc)
table(cdc$genhlth)
a = table(cdc$genhlth)
class(a)
a[1]
a[5]
a[1]/a[5]
sample(1:10)
sample(1:10, size = 5)
sample(c(0,1), 10, replace = TRUE)
sample(c("A","T","G","C"), 10, replace = TRUE)
sample.int(20, 12)
load("kobe.Rdata")
View(kobe)
kobe_streak = get_streak(kobe$basket)
get_streak = function(x){
y = rep(0,length(x))
y[x == "H"] = 1
y = c(0, y, 0)
wz = which(y == 0)
streak = diff(wz) - 1
return(streak)
}
kobe_streak = get_streak(kobe$basket)
barplot(table(kobe_streak))
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
outcomes = c(“heads”, “tails”)
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfair_coin)
outcomes = c(“heads”, “tails”)
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
outcomes = c("heads", "tails")
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfail_coin)
table(unfair_coin)
outcomes = c("H", "M")
sim_basket = sample(outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
table(sim_basket)
kobe_streak = get_streak(kobe$basket)
kobe_streak
sim_streak = get_streak(sim_basket)
summary(kobe_streak)
summary(sim_streak)
kobe_table = table(kobe_streak)
sim_table = table(sim_streak)
barplot(kobe_table)
barplot(sim_table)
x = c("H","M","H","H")
y = rep(0,length(x))
y
y[x == "H"] = 1
y
y = c(0, y, 0)
y
wz = which(y == 0)
wz
streak = diff(wz) - 1
streak
kobe%game
kobe$game
unique(kobe$game)
curve(dnorm,-3,3)
dnorm(0)
dnorm(0,mean=3,sd=5)
pnorm(1.5)
pnorm(1.5, lower.tail=FALSE)
curve(pnorm(x), -3,3)
load("ames.Rdata")
View(ames)
area = ames$Gr.Liv.Area
hist(area)
sample_means10 = rep(NA, 5000)
sample_means50 = rep(NA, 5000)
sample_means100 = rep(NA, 5000)
for (i in 1:5000) {
samp = sample(area, 10)
sample_means10[i] = mean(samp)
samp = sample(area, 50)
sample_means50[i] = mean(samp)
samp = sample(area, 100)
sample_means100[i] = mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
population = ames$Gr.Liv.Area
samp = sample(population, 50)
sample_mean = mean(samp)
hist(samp)
sde = sd(samp)/sqrt(50)
lower = sample_mean - 1.96 * sde
upper = sample_mean + 1.96 * sde
lower
upper
qnorm(0.975)
qnorm(0.995)
sde = sd(samp)/sqrt(50)
lower = sample_mean - 2.58 * sde
upper = sample_mean + 2.58 * sde
lower
upper
pnorm(1.96)
pnorm(-1.96)
curve(dnorm, -3,3)
pnorm(-1.96)
pnorm(1.96)
mtcars[1:3]
head(mtcars[1:3])
cov(mtcars[1:3])
cor(mtcars[1:3])
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(mtcars[1:3])), fill=value, geom="tile")
load("~/rbasic/course3/mlb11.RData")
head(mlb11)
View(mlb11)
correlation = cor(mlb11$runs, mlb11$at_bats)
correlation
plot(mlb11$at_bats, mlb11$runs)
m1 = lm(runs ~ at_bats, data = mlb11)
m1
summary(m1)
summary(m1)
plot(mlb11$runs ~ mlb11$at_bats)
plot(mlb11$runs ~ mlb11$at_bats)
m1 = lm(runs ~ at_bats, data = mlb11)
abline(m1)
cor(mlb11)
str(mlb11)
str(mlb11)
mlb11[1]
mlb11[2:]
mlb11[2:,]
mlb11[2:10,]
cor(mlb11[2:10])
cor(mlb11[2:11])
cor(mlb11[2:12])
cor(mlb11[2:13])
cmat = cor(mlb11[2:12])
View(cmat)
m1 = lm(runs ~ new_obs, data = mlb11)
plot(mlb11$runs ~ mlb11$new_obs)
cmat = cor(mlb11[2:12])
binom.test(x=92, n=315, p=1/6)
cmat = cor(mlb11[2:12])
binom.test(x=92, n=315, p=1/6)
mpg.mu = mean(mtcars$mpg)
mpg_am = mtcars$mpg[mtcars$am == 0]
t.test(mpg_am,mu = mpg.mu)
t.test(mtcars$mpg~mtcars$am)
ftable = table(mtcars$am, mtcars$gear)
ftable
mosaicplot(ftable, main="Number of Forward Gears Within Automatic and Manual Cars", color = TRUE)
mosaicplot(ftable, main="Number of Forward Gears Within Automatic and Manual Cars", color = TRUE)
chisq.test(ftable)
a = findFn("chow test")
a
a = findFn("chow test")
library(sos)
names(cdc)
head(cdc$genhlth)
table(cdc$genhlth)
a = table(cdc$genhlth)
a[1]
a[5]
a[1]/a[5]
